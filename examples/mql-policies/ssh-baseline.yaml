policies:
  - uid: ssh-baseline
    name: SSH Baseline
    version: 2.6.4
    props:
      valid_ciphers:
      valid_kexs:
      valid_macs:
      ssh_version:
      ssh_custom_user:
      ssh_custom_group:
      ssh_custom_path:
      sshd_custom_path:
      sshd_config_custom_path:
      sshd_custom_port:
      sshd_valid_privseparation:
      sshd_max_auth_tries:
      sshd_permittunnel:
      sshd_tcpforwarding:
      sshd_agentforwarding:
      sshd_gatewayports:
      sshd_x11forwarding:
      sshd_banner:
    specs:
      - title: SSH server config
        asset_filter:
          query: |
            platform.family.contains("linux")
            service("sshd").installed || service("sshd").running || service("sshd").enabled
        scoring_queries:
          sshd-01: null
          sshd-02: null
          sshd-03: null
          sshd-04: null
          sshd-05: null
          sshd-06: null
          sshd-07: null
          sshd-08: null
          sshd-09: null
          sshd-10: null
          sshd-11: null
          sshd-12: null
          sshd-13: null
          sshd-14: null
          sshd-15: null
          sshd-16: null
          sshd-17: null
          sshd-18: null
          sshd-19: null
          sshd-20: null
          sshd-21: null
          sshd-22: null
          sshd-23: null
          sshd-24: null
          sshd-25: null
          sshd-27: null
          sshd-28: null
          sshd-29: null
          sshd-30: null
          sshd-31: null
          sshd-32: null
          sshd-33: null
          sshd-34: null
          sshd-35: null
          sshd-36: null
          sshd-37: null
          sshd-38: null
          sshd-39: null
          sshd-40: null
          sshd-41: null
          sshd-42: null
          sshd-43: null
          sshd-44: null
          sshd-45: null
          sshd-46: null
          sshd-47: null
      - title: SSH client config
        asset_filter:
          query: |
            platform.family.contains("linux")
            command("which ssh").exitcode == 0
        scoring_queries:
          ssh-01: null
          ssh-02: null
          ssh-03: null
          ssh-04: null
          ssh-05: null
          ssh-06: null
          ssh-07: null
          ssh-08: null
          ssh-09: null
          ssh-10: null
          ssh-11: null
          ssh-12: null
          ssh-13: null
          ssh-14: null
          ssh-15: null
          ssh-16: null
          ssh-17: null
          ssh-18: null
          ssh-19: null
          ssh-20: null
    docs:
      desc: Test-suite for best-practice SSH hardening

props:
  - uid: valid_ciphers
    title: Expected value for sshd_config ciphers
    query: |
      return ["chacha20-poly1305@openssh.com", "aes256-gcm@openssh.com", "aes128-gcm@openssh.com", "aes256-ctr", "aes192-ctr", "aes128-ctr"]
  - uid: valid_kexs
    title: Expected value for sshd_config kexs
    query: |
      return ["sntrup761x25519-sha512@openssh.com", "curve25519-sha256@libssh.org", "diffie-hellman-group-exchange-sha256"]
  - uid: valid_macs
    title: Expected value for sshd_config macs
    query: |
      return ["hmac-sha2-512-etm@openssh.com", "hmac-sha2-256-etm@openssh.com", "umac-128-etm@openssh.com", "hmac-sha2-512", "hmac-sha2-256"]
  - uid: ssh_version
    title: Returns the SSH Version
    query: |
      return command("ssh -V").stderr.trim.find(/([\d\.\d]+)/)[0]
  - uid: ssh_custom_user
    title: The SSH user. It must be an unprivileged user in a container
    query: return "root"
  - uid: ssh_custom_group
    title: The SSH group
    query: |
      if (platform.family.contains("darwin")){
        return "wheel"
      }
      return "root"
  - uid: ssh_custom_path
    title: Path to sshd cond
    query: return "/etc/ssh/ssh_config"
  - uid: sshd_custom_path
    title: Path to ssh path
    query: return "/etc/ssh"
  - uid: sshd_config_custom_path
    title: Path to sshd config
    query: return "/etc/ssh/sshd_config"
  - uid: sshd_custom_port
    title: Sometimes the ssh port is not 22. For instance, in a container as another user, 22 is forbidden
    query: return 22
  - uid: sshd_valid_privseparation
    title: TODO need to be defined
    query: |
      # check ssh_crypto.valid_privseparation
      return "no"
  - uid: sshd_max_auth_tries
    title: Expected value for max_auth_retries
    query: return 2
  - uid: sshd_permittunnel
    title: Expected value for sshd_config PermitTunnel
    query: return "no"
  - uid: sshd_tcpforwarding
    title: Expected value for sshd_config TcpForwarding
    query: return "no"
  - uid: sshd_agentforwarding
    title: Expected value for sshd_config AgentForwarding
    query: return "no"
  - uid: sshd_gatewayports
    title: Expected value for sshd_config GatewayPorts
    query: return "no"
  - uid: sshd_x11forwarding
    title: Expected value for sshd_config X11Forwarding
    query: return "no"
  - uid: sshd_banner
    title: Expected value for sshd_config Banner
    query: return "none"
queries:
  - uid: sshd-01
    title: "Server: Check for secure ssh ciphers"
    docs:
      desc:
        Configure a list of ciphers to the best secure ciphers (avoid older and
        weaker ciphers)
    query: |
      sshd.config(props.sshd_config_custom_path).ciphers.containsOnly(props.valid_ciphers)
  - uid: sshd-02
    title: "Server: Check for secure ssh Key-Exchange Algorithm"
    docs:
      desc:
        Configure a list of Key-Exchange Algorithms (Kexs) to the best secure Kexs
        (avoid older and weaker Key-Exchange Algorithm)
    query: |
      sshd.config(props.sshd_config_custom_path).kexs.containsOnly(props.valid_kexs)
  - uid: sshd-03
    title: "Server: Check for secure ssh Message Authentication Codes"
    docs:
      desc:
        Configure a list of Message Authentication Codes (MACs) to the best secure
        MACs (avoid older and weaker Message Authentication Codes)
    query: |
      sshd.config(props.sshd_config_custom_path).macs.containsOnly(props.valid_macs)
  - uid: sshd-04
    title: "Server: Check SSH folder owner, group and permissions."
    docs:
      desc:
        The SSH folder should owned by root or a defined user, only be writable
        by owner and readable by others.
    query: |
      file(props.sshd_custom_path) {
        exists
        permissions.isDirectory 
        user.name == props.ssh_custom_user
        group.name == props.ssh_custom_group

        permissions.user_readable == true
        permissions.user_writeable == true
        permissions.user_executable == true

        permissions.group_readable == true
        permissions.group_writeable == false
        # TODO: we need to double check that value
        # permissions.group_executable == false

        permissions.other_readable == true
        permissions.other_writeable == false
        # TODO: we need to double check that value
        # permissions.other_executable == false
      }
  - uid: sshd-05
    title: "Server: Check sshd_config owner, group and permissions."
    docs:
      desc:
        The sshd_config should owned by root or a defined user, only be writable/readable
        by owner and not be executable.
    query: |
      file(props.sshd_config_custom_path) {
        exists
        permissions.isFile 
        user.name == props.ssh_custom_user
        group.name == props.ssh_custom_group

        permissions.user_readable == true
        permissions.user_writeable == true
        permissions.user_executable == false

        permissions.group_readable == false
        permissions.group_writeable == false
        permissions.group_executable == false

        permissions.other_readable == false
        permissions.other_writeable == false
        permissions.other_executable == false
      }
  - uid: sshd-06
    title:
      "Server: Do not permit root-based login or do not allow password and keyboard-interactive
      authentication"
    docs:
      desc:
        Reduce the potential risk to gain full privileges access of the system because
        of weak password and keyboard-interactive authentication, do not allow logging
        in as the root user or with password authentication.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PermitRootLogin"] == /no|without-password|prohibit-password/
  - uid: sshd-07
    title: "Server: Specify the listen ssh Port"
    docs:
      desc:
        Always specify which port the SSH server should listen to. Prevent unexpected
        settings.
    query: |
      sshd.config(props.sshd_config_custom_path).params["Port"] == props.sshd_custom_port
  - uid: sshd-08
    title: "Server: Specify the AddressFamily to your need"
    docs:
      desc:
        OpenSSH should be configured to the network family. Set it to inet if you
        use IPv4 only. For IPv6 only set it to inet6.
    query: |
      sshd.config(props.sshd_config_custom_path).params["AddressFamily"] == /inet|inet6|any/
  - uid: sshd-09
    title: "Server: Specify ListenAddress"
    docs:
      desc:
        Limit the SSH server to listen to a specific address. Don't let it listen
        on all interfaces to avoid logins from unexpected sources.
    query: |
      sshd.config(props.sshd_config_custom_path).params["ListenAddress"] != null
      sshd.config(props.sshd_config_custom_path).params["ListenAddress"] != ""
      sshd.config(props.sshd_config_custom_path).params["ListenAddress"] != /^\s*$/
  - uid: sshd-10
    title: "Server: Specify protocol version 2"
    docs:
      desc:
        Only SSH protocol version 2 connections should be permitted. Version 1 of
        the protocol contains security vulnerabilities. Don't use legacy insecure SSHv1
        connections anymore.
    query: |
      if (props.ssh_version < 7.6) {
        sshd.config(props.sshd_config_custom_path).params["Protocol"] == 2
      }
  - uid: sshd-11
    title: "Server: Enable StrictModes"
    docs:
      desc: Prevent the use of insecure home directory and key file permissions.
    query: |
      sshd.config(props.sshd_config_custom_path).params["StrictModes"] == "yes"
  - uid: sshd-12
    title: "Server: Specify SyslogFacility to AUTH"
    docs:
      desc:
        Logging should be set to go to the /var/log/auth.log facility by using the
        SysLog AUTH parameter. This will ensure that any problems around invalid logins
        or the like are forwarded to a central security file for auditing purposes
    query: |
      sshd.config(props.sshd_config_custom_path).params["SyslogFacility"] == "AUTH"
  - uid: sshd-13
    title: "Server: Specify LogLevel to VERBOSE"
    docs:
      desc: Be verbose in logging, to allow analysis in case of unexpected behavior.
    query: |
      sshd.config(props.sshd_config_custom_path).params["LogLevel"] == "VERBOSE"
  - uid: sshd-14
    title: "Server: Specify SSH HostKeys"
    docs:
      desc: Specify HostKey for protection against Man-In-The-Middle Attacks
    query: |
      allowed = ["/etc/ssh/ssh_host_rsa_key", "/etc/ssh/ssh_host_ecdsa_key", "/etc/ssh/ssh_host_ed25519_key"]
      sshd.config(props.sshd_config_custom_path).hostkeys.containsOnly(allowed)
  - uid: sshd-15
    title: "Server: Specify UseLogin to NO"
    docs:
      desc:
        Disable legacy login mechanism and do not use login for interactive login
        sessions.
    query: |
      if (props.ssh_version < 7.4) {
        sshd.config(props.sshd_config_custom_path).params["UseLogin"] == "no"
      } else {
        sshd.config(props.sshd_config_custom_path).params["UseLogin"] == null
      }
  - uid: sshd-16
    title: "Server: Use privilege separation"
    docs:
      desc:
        UsePrivilegeSeparation is an option, when enabled will allow the OpenSSH
        server to run a small (necessary) amount of code as root and the of the code
        in a chroot jail environment. This enables ssh to deal incoming network traffic
        in an unprivileged child process to avoid privilege escalation by an attacker.
    query: |
      sshd.config(props.sshd_config_custom_path).params["UsePrivilegeSeparation"] == /no|sandbox/
  - uid: sshd-17
    title: "Server: Disable PermitUserEnvironment"
    docs:
      desc:
        Enabling environment processing may enable users to bypass access restrictions
        in some configurations using mechanisms such as LD_PRELOAD.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PermitUserEnvironment"] == "no"
  - uid: sshd-18
    title: "Server: Specify LoginGraceTime"
    docs:
      desc:
        The LoginGraceTime gives the user 30 seconds to accomplish a login. This
        could be used to conduct a Denial of Service (DoS) against a running SSH daemon.
    query: |
      sshd.config(props.sshd_config_custom_path).params["LoginGraceTime"] == 30
  - uid: sshd-19
    title: "Server: Specify Limit for maximum authentication retries"
    docs:
      desc:
        The MaxAuthTries parameter specifies the maximum number of authentication
        attempts permitted per connection. When the login failure count reaches half
        the number, error messages will be written to the syslog file detailing the
        login failure. Setting the MaxAuthTries parameter to a low number will minimize
        the risk of successful brute force attacks to the SSH server. The default is
        2 but should be configured based on site policy.
    tags:
      CIS Red Hat Enterprise Linux 7 Benchmark version 01-31-2017: 2.1.1
    refs:
      - title: Center for Internet Security
        url: https://www.cisecurity.org/
    query: |
      sshd.config(props.sshd_config_custom_path).params["MaxAuthTries"] == props.sshd_max_auth_tries
  - uid: sshd-20
    title: "Server: Specify maximum sessions"
    docs:
      desc:
        Specifies the maximum number of open sessions permitted per network connection.
        This could be used to conduct a Denial of Service (DoS) against a running SSH
        daemon.
    query: |
      sshd.config(props.sshd_config_custom_path).params["MaxSessions"] <= 10
  - uid: sshd-21
    title: "Server: Specify maximum startups"
    docs:
      desc:
        Limit the number of concurrent unauthenticated sessions to prevent Denial
        of Service (DoS) against a running SSH daemon.
    query: |
      sshd.config(props.sshd_config_custom_path).params["MaxStartups"] == "10:30:60"
  - uid: sshd-22
    title: "Server: Enable PubkeyAuthentication"
    docs:
      desc:
        Prefer public key authentication mechanisms, because other methods are weaker
        (e.g. passwords).
    query: |
      sshd.config(props.sshd_config_custom_path).params["PubkeyAuthentication"] == "yes"
  - uid: sshd-23
    title: "Server: Enable IgnoreRhosts"
    docs:
      desc:
        Ignore legacy .rhosts configuration, because rhosts are a weak way to authenticate
        systems and provide attacker more ways to enter the system.
    query: |
      sshd.config(props.sshd_config_custom_path).params["IgnoreRhosts"] == "yes"
  - uid: sshd-24
    title: "Server: Enable IgnoreUserKnownHosts"
    docs:
      desc:
        This option is a weak way for authentication and provide attacker more ways
        to enter the system.
    query: |
      sshd.config(props.sshd_config_custom_path).params["IgnoreUserKnownHosts"] == "yes"
  - uid: sshd-25
    title: "Server: Disable HostbasedAuthentication"
    docs:
      desc:
        This option is a weak way for authentication and provide attacker more ways
        to enter the system.
    query: |
      sshd.config(props.sshd_config_custom_path).params["HostbasedAuthentication"] == "no"
  - uid: sshd-27
    title: "Server: Disable password-based authentication"
    docs:
      desc: Avoid password-based authentications.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PasswordAuthentication"] == "no"
  - uid: sshd-28
    title: "Server: Disable PermitEmptyPasswords"
    docs:
      desc:
        Accounts should be protected and users should be accountable. For this reason
        the usage of empty passwords should never be allowed.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PermitEmptyPasswords"] == "no"
  - uid: sshd-29
    title: "Server: Disable ChallengeResponseAuthentication"
    docs:
      desc: Avoid challenge-response and password-based authentications.
    query: |
      sshd.config(props.sshd_config_custom_path).params["ChallengeResponseAuthentication"] == "no"
  - uid: sshd-30
    title: "Server: Disable Kerberos"
    docs:
      desc: Avoid kerberos authentication.
    query: |
      sshd.config(props.sshd_config_custom_path).params["KerberosAuthentication"] == "no"
  - uid: sshd-31
    title: "Server: Disable Kerberos or Local Password"
    docs:
      desc:
        Avoid kerberos authentication because it use password-based authentication
        as fallback.
    query: |
      sshd.config(props.sshd_config_custom_path).params["KerberosOrLocalPasswd"] == "no"
  - uid: sshd-32
    title: "Server: Enable KerberosTicketCleanup"
    docs:
      desc:
        Specifies whether to automatically destroy the user's ticket cache file
        on logout.
    query: |
      sshd.config(props.sshd_config_custom_path).params["KerberosTicketCleanup"] == "yes"
  - uid: sshd-33
    title: "Server: Disable GSSAPIAuthentication"
    docs:
      desc: If you do not use GSSAPI authentication then disable it.
    query: |
      sshd.config(props.sshd_config_custom_path).params["GSSAPIAuthentication"] == "no"
  - uid: sshd-34
    title: "Server: Enable GSSAPICleanupCredentials"
    docs:
      desc: Automatically destroy the user's credentials cache on logout.
    query: |
      sshd.config(props.sshd_config_custom_path).params["GSSAPICleanupCredentials"] == "yes"
  - uid: sshd-35
    title: "Server: Disable TCPKeepAlive"
    docs:
      desc:
        Avoid the TCPKeepAlive messages to see if the client is still alive, because
        they are sent over unencrypted connection and are spoofable.
    query: |
      sshd.config(props.sshd_config_custom_path).params["TCPKeepAlive"] == "no"
  - uid: sshd-36
    title: "Server: Set a client alive interval"
    docs:
      desc: ClientAlive messages are sent over encrypted connection and are not spoofable.
    query: |
      sshd.config(props.sshd_config_custom_path).params["ClientAliveInterval"] == 300
  - uid: sshd-37
    title: "Server: Configure a few client alive counters"
    docs:
      desc:
        This indicates the total number of checkalive message sent by the ssh server
        without getting any response from the ssh client. ClientAlive messages are sent
        over encrypted connection and are not spoofable.
    query: |
      sshd.config(props.sshd_config_custom_path).params["ClientAliveCountMax"] == 3
  - uid: sshd-38
    title: "Server: Disable tunnels"
    docs:
      desc: Avoid to use tunnels.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PermitTunnel"] == props.sshd_permittunnel
  - uid: sshd-39
    title: "Server: Disable TCP forwarding"
    docs:
      desc:
        If you use TCP forwarding in an uncontrolled manner then you can bypass
        the firewalls
    query: |
      sshd.config(props.sshd_config_custom_path).params["AllowTcpForwarding"] == props.sshd_tcpforwarding
  - uid: sshd-40
    title: "Server: Disable Agent forwarding"
    docs:
      desc:
        Users with the ability to bypass file permissions on the remote host (for
        the agent's UNIX-domain socket) can access the local agent through the forwarded
        connection. An attacker cannot obtain key material from the agent, however they
        can perform operations on the keys that enable them to authenticate using the
        identities loaded into the agent.
    query: |
      sshd.config(props.sshd_config_custom_path).params["AllowAgentForwarding"] == props.sshd_agentforwarding
  - uid: sshd-41
    title: "Server: Disable gateway ports"
    docs:
      desc: Prevent remote hosts from connecting to forwarded ports on the node.
    query: |
      sshd.config(props.sshd_config_custom_path).params["GatewayPorts"] == props.sshd_gatewayports
  - uid: sshd-42
    title: "Server: Disable X11Forwarding"
    docs:
      desc:
        Prevent X11 forwarding by default, as it can be used in a limited way to
        enable attacks.
    query: |
      sshd.config(props.sshd_config_custom_path).params["X11Forwarding"] == props.sshd_x11forwarding
  - uid: sshd-43
    title: "Server: Enable X11UseLocalhost"
    docs:
      desc:
        SSH daemon should bind the X11 forwarding server to the loopback address.
        This prevents remote hosts from connecting to the proxy display and reduce the
        attack surface
    query: |
      sshd.config(props.sshd_config_custom_path).params["X11UseLocalhost"] == "yes"
  - uid: sshd-44
    title: "Server: Disable PrintMotd"
    docs:
      desc:
        This specifies that the SSH daemon itself should not read and display the
        message of the day file.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PrintMotd"] == "no"
  - uid: sshd-45
    title: "Server: PrintLastLog"
    docs:
      desc:
        This tells the SSH daemon to print out information about the last time you
        logged in.
    query: |
      sshd.config(props.sshd_config_custom_path).params["PrintLastLog"] == "no"
  - uid: sshd-46
    title: "Server: Banner"
    docs:
      desc: Specifies a banner file to serve before authentication succeeds
    query: |
      sshd.config(props.sshd_config_custom_path).params["Banner"] == props.sshd_banner
  - uid: sshd-47
    title: "Server: DebianBanner"
    docs:
      desc: Specifies whether to include OS distribution in version information
    query: |
      if (platform.family.contains("debian")) {
        sshd.config(props.sshd_config_custom_path).params["DebianBanner"] == "no"
      } else {
        sshd.config(props.sshd_config_custom_path).params["DebianBanner"] == null
      }
  - uid: ssh-01
    title: "client: Check ssh_config owner, group and permissions."
    docs:
      desc:
        The ssh_config should owned by root or a specified user, only be writable
        by owner and readable to all.
    query: |
      file(props.ssh_custom_path) {
        exists
        permissions.isFile 
        user.name == props.ssh_custom_user
        group.name == props.ssh_custom_group

        permissions.user_readable == true
        permissions.user_writeable == true
        permissions.user_executable == false

        permissions.group_readable == true
        permissions.group_writeable == false
        permissions.group_executable == false

        permissions.other_readable == true
        permissions.other_writeable == false
        permissions.other_executable == false
      }
  - uid: ssh-02
    title: "Client: Specify the AddressFamily to your need"
    docs:
      desc:
        OpenSSH should be configured to the network family. Set it to inet if you
        use IPv4 only. For IPv6 only set it to inet6.
    query: |
      sshd.config(props.ssh_custom_path).params["AddressFamily"] == /inet|inet6|any/
  - uid: ssh-03
    title: "Client: Specify expected ssh port"
    docs:
      desc:
        Always specify which port the SSH client should connect. Prevent unexpected
        settings.
    query: |
      sshd.config(props.ssh_custom_path).params["Port"] == 22
  - uid: ssh-04
    title: "Client: Specify protocol version 2"
    docs:
      desc:
        Only SSH protocol version 2 connections should be permitted. Version 1 of
        the protocol contains security vulnerabilities. Don't use legacy insecure SSHv1
        connections anymore.
    query: |
      if (props.ssh_version < 7.6) {
        sshd.config(props.ssh_custom_path).params["Protocol"] == 2
      }
  - uid: ssh-05
    title: "Client: Disable batch mode"
    docs:
      desc: Avoid batch mode in the default configuration.
    query: |
      sshd.config(props.ssh_custom_path).params["BatchMode"] == "no"
  - uid: ssh-06
    title: "Client: Check Host IPs"
    docs:
      desc:
        Make sure that SSH checks the host IP address in the known_hosts file, to
        avoid DNS spoofing effects.
    query: |
      sshd.config(props.ssh_custom_path).params["CheckHostIP"] == "yes"
  - uid: ssh-07
    title: "Client: Ask when checking host keys"
    docs:
      desc: Don't automatically add new hosts keys to the list of known hosts.
    query: |
      sshd.config(props.ssh_custom_path).params["StrictHostKeyChecking"] == /ask|yes/
  - uid: ssh-08
    title: "Client: Check for secure ssh ciphers"
    docs:
      desc:
        Configure a list of ciphers to the best secure ciphers (avoid older and
        weaker ciphers)
    query: |
      sshd.config(props.ssh_custom_path).ciphers.containsOnly(props.valid_ciphers)
  - uid: ssh-09
    title: "Client: Check for secure ssh Key-Exchange Algorithm"
    docs:
      desc:
        Configure a list of Key-Exchange Algorithms (Kexs) to the best secure Kexs
        (avoid older and weaker Key-Exchange Algorithm)
    query: |
      sshd.config(props.ssh_custom_path).kexs.containsOnly(props.valid_kexs)
  - uid: ssh-10
    title: "Client: Check for secure ssh Message Authentication Codes"
    docs:
      desc:
        Configure a list of Message Authentication Codes (MACs) to the best secure
        MACs (avoid older and weaker Message Authentication Codes)
    query: |
      sshd.config(props.ssh_custom_path).macs.containsOnly(props.valid_macs)
  - uid: ssh-11
    title: "Client: Disable agent forwarding"
    docs:
      desc:
        Prevent agent forwarding by default, as it can be used in a limited way
        to enable attacks.
    query: |
      sshd.config(props.ssh_custom_path).params["ForwardAgent"] == "no"
  - uid: ssh-12
    title: "Client: Disable X11Forwarding"
    docs:
      desc:
        Prevent X11 forwarding by default, as it can be used in a limited way to
        enable attacks.
    query: |
      sshd.config(props.ssh_custom_path).params["ForwardX11"] == "no"
  - uid: ssh-13
    title: "Client: Disable HostbasedAuthentication"
    docs:
      desc:
        This option is a weak way for authentication and provide attacker more ways
        to enter the system.
    query: |
      sshd.config(props.ssh_custom_path).params["HostbasedAuthentication"] == "no"
  - uid: ssh-14
    title: "Client: Disable rhosts-based authentication"
    docs:
      desc:
        Avoid rhosts-based authentication, as it opens more ways for an attacker
        to enter a system.
    query: |
      sshd.config(props.ssh_custom_path).params["RhostsRSAAuthentication"] == "no"
  - uid: ssh-15
    title: "Client: Enable RSA authentication"
    docs:
      desc: Make sure RSA authentication is used by default.
    query: |
      sshd.config(props.ssh_custom_path).params["RSAAuthentication"] == "yes"
  - uid: ssh-16
    title: "Client: Disable password-based authentication"
    docs:
      desc: Avoid password-based authentications.
    query: |
      sshd.config(props.ssh_custom_path).params["PasswordAuthentication"] == "no"
  - uid: ssh-17
    title: "Client: Disable GSSAPIAuthentication"
    docs:
      desc: If you do not use GSSAPI authentication then disable it.
    query: |
      sshd.config(props.ssh_custom_path).params["GSSAPIAuthentication"] == "no"
  - uid: ssh-18
    title: "Client: Disable GSSAPIDelegateCredentials"
    docs:
      desc: If you do not use GSSAPI authentication then disable it.
    query: |
      sshd.config(props.ssh_custom_path).params["GSSAPIDelegateCredentials"] == "no"
  - uid: ssh-19
    title: "Client: Disable tunnels"
    docs:
      desc: Avoid using SSH tunnels.
    query: |
      sshd.config(props.ssh_custom_path).params["Tunnel"] == "no"
  - uid: ssh-20
    title: "Client: Do not permit local commands"
    docs:
      desc: Do not permit any local command execution.
    query: |
      sshd.config(props.ssh_custom_path).params["PermitLocalCommand"] == "no"
